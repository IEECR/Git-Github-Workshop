---------- MODULE 3: Remote version control with git ----------

You will create a empty remote repository on github and connect it to your local repository.
You will apply changes locally and remotely and broadcast them to the different clones of your repository.
You will do that using the git command-line interface (CLI); it means you will work from the terminal.

---------- Steps:
1. In the browser, go to your github account and create your own private repository.
    Note: a repository naming convention is to use lower-case letters
          and dashes ('-') instead of spaces or underscores.
    Note: make your repository private. 
2. On github, move into your repository and copy its URL (should be: https://github.com/YourAccountName/YourRepoName.git).
3. Connect the newly created repository on github to your local repository.
   In the terminal, move into your repository from module 2.
   Type: 'git remote add origin url-of-your-repository'
4. Now you can transfer the committed files to the remote repository using the 'git push' command.
   In this case you need to specify the branch of the remote repository
   you want to push to (the concept of branches will be treated later, don't worry for now).
   In the terminal, type: 'git push -u origin master' (try main instead of master if there is an error)
5. In the browser, refresh the site of your repository.
6. In the browser, check the history of the repository (click on 'commits'; below the repository name, on the right side).
7. In the browser on github, edit the file words.txt: Write 3 words starting with C and commit.
8. To sync your local repository with the remote version, type 'git pull' or 'git pull --all'
    Note: the pull command actually performes two actions: a fetch and a merge action.
          You could do the two steps separately by using first 'git fetch' and then 'git merge'.
          'git fetch' ONLY downloads the changes to your local repository, but does not affect
          the working directory; this is achieved with the merge command. Try 'git status' in between the two steps.
9. In VSCode (or a text editor), add 3 words starting with D to the file words.txt and save.
   Also, add 3 words, you associate with the first animal in animals.txt and save.
10. Broadcast only the changes in the words.txt file to the remote repository: stage the file, commit, and push. 
11. In the browser on github, check if it worked (you maybe need to refresh the site).
12. In the browser on github, add 3 words you associate with the second animal to animals.txt and commit.
13. In the terminal, again pull the remote changes. Why is there an error?
14. To handle the situation, you need to decide which changes to keep: the ones from the local or remote repository.
15. Type:   'git checkout --ours animals.txt' -> to keep local changes (make sure, the file is staged and commited before)
            'git checkout --theirs animals.txt' -> to keep remote changes
16. Stage the file (animals.txt) again.
17. Commit
18. Pull again from origin.

19. Open the repository you cloned in module 1 and go to the file 001.txt in the folder /txt-files/.
    Add the answer to the question you find there and save.
20. Stage, commit, push. What happens?



---------- Helpful links:
Managing remote repositories: https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories
About git fetch: https://www.freecodecamp.org/news/git-pull-remote-branch-how-to-fetch-remote-branches-in-git/
Some tips on resolving merge conflicts: https://stackoverflow.com/questions/161813/how-do-i-resolve-merge-conflicts-in-a-git-repository