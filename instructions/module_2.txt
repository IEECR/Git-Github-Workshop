---------- MODULE 2: Local version control with Git ----------

In this step, yu will create your own local repository and put a file in it under local version control.
You will do that using the Git command-line interface (CLI); it means you will work from the terminal.

---------- Steps:
1. Create a directory that will become your repository.
    Note: a repository naming convention is to use lower-case letters
          and dashes ('-') instead of spaces or underscores.
2. Create 2 txt files in your repository directory and name them: animals.txt and words.txt.
       Write the name of your favorite animal into the file animals.txt and save.
3. In your terminal, move into the newly created directory.
4. Type 'git init' to turn the directory into a repository that is tracked by git.
5. Type 'git status' to get an overview of (un)tracked changes in your repository.
6. Now, let's assume that you are sure about the changes to the file animals.txt,
   but not so sure if you want to keep the changes to words.txt.
   So you want to stage only the file animals.txt (add it to the index/staging area).
   Type: 'git add animals.txt' (remember, your terminal has to point to the repository directory).
7. Check with 'git status'.
8. Now, lets commit!
   In the terminal, type: 'git commit -m "type your commit message"'
   Think about what a good commit message could look like!
9. You decide, that you also want to add your least favorite animal to animals.txt. Do it and save!
10. Check with 'git status'.
11. Type: 'git add *' and check what this command does!
12. Type: 'git remove words.txt'. What happened?
13. Commit the file animals.txt with the most recent change to it.
14. Now, let's go back to words.txt. Add 3 words starting with A and intentionally misspell at least one. Save. 
15. Forget that you did a spelling mistake, stage the file (check the status) and commit.
16. Now you remember again, that something looks weird about your words and you really want to undo that last commit.
    Type: 'git revert HEAD'
17. Check with git status.
18. Correct the mistake, stage, and commit again.
19. Check the history with 'git log'. It will show you the commits to this repository, starting with the most recent.
    Note: use the space key or arrow-down key to move through the list of commits. Use the q key to exit.
    Can you figure out what git revert does?


---------- Helpful links:
The git staging area: https://www.developernation.net/blog/git-internals-part-3-understanding-the-staging-area-in-git/
Information about resetting to a previous commit: https://www.atlassian.com/git/tutorials/undoing-changes/git-reset
Bonus: Stashing changes: https://www.atlassian.com/git/tutorials/saving-changes/git-stash#stashing-your-work